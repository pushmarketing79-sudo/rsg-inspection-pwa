/* RSG Inspection PWA – offline-first with queued sync */
const STORAGE_KEY = "rsg_inspections_queue_v1";

const $ = (sel) => document.querySelector(sel);

function getFormData() {
const form = $("#inspectionForm");
const fd = new FormData(form);

// collect checkboxes into array
const checks = [];
form.querySelectorAll('input[name="checks"]:checked').forEach(cb => checks.push(cb.value));

// normalize booleans
const defectsFound = $("#defects_found").checked;
const roadworthy = $("#roadworthy").checked;

return {
timestamp: fd.get("timestamp"),
driver_name: fd.get("driver_name")?.trim(),
unit_number: fd.get("unit_number")?.trim(),
odometer: Number(fd.get("odometer") || 0),
inspection_type: fd.get("inspection_type"),
checks,
defects_found: defectsFound,
roadworthy,
notes: fd.get("notes")?.trim() || "",
// basic client meta
client_meta: {
userAgent: navigator.userAgent,
tz: Intl.DateTimeFormat().resolvedOptions().timeZone || "UTC",
when: new Date().toISOString()
}
};
}

// save offline
function saveOffline(entry) {
const queue = JSON.parse(localStorage.getItem(STORAGE_KEY) || "[]");
queue.push(entry);
localStorage.setItem(STORAGE_KEY, JSON.stringify(queue));
updatePendingList();
}

function updatePendingList() {
const list = $("#pendingList");
const section = $("#pendingSection");
list.innerHTML = "";
const queue = JSON.parse(localStorage.getItem(STORAGE_KEY) || "[]");
if (queue.length === 0) {
section.hidden = true;
return;
}
section.hidden = false;
queue.forEach((q) => {
const li = document.createElement("li");
li.textContent = `${q.timestamp || "No time"} – ${q.driver_name || "No name"} – ${q.inspection_type || ""}`;
list.appendChild(li);
});
}

async function sendEntry(entry) {
try {
const res = await fetch(WEBHOOK_URL, {
method: "POST",
body: JSON.stringify(entry),
headers: { "Content-Type": "application/json" }
});
if (!res.ok) throw new Error("Bad status " + res.status);
return true;
} catch (err) {
console.error("Send failed:", err);
return false;
}
}

async function syncQueue() {
const queue = JSON.parse(localStorage.getItem(STORAGE_KEY) || "[]");
if (queue.length === 0) {
$("#statusMsg").textContent = "No pending submissions.";
return;
}
const stillPending = [];
for (let entry of queue) {
const ok = await sendEntry(entry);
if (!ok) stillPending.push(entry);
}
localStorage.setItem(STORAGE_KEY, JSON.stringify(stillPending));
updatePendingList();
$("#statusMsg").textContent = stillPending.length === 0
? "All pending inspections synced."
: `${stillPending.length} still pending.`;
}

$("#inspectionForm").addEventListener("submit", async (e) => {
e.preventDefault();
const entry = getFormData();
$("#submitBtn").disabled = true;
$("#statusMsg").textContent = "Submitting...";
const ok = await sendEntry(entry);
if (ok) {
$("#statusMsg").textContent = "Inspection submitted ✅";
$("#inspectionForm").reset();
// set now again after reset
const dt = document.getElementById("timestamp");
if (dt) dt.value = new Date().toISOString().slice(0,16);
} else {
$("#statusMsg").textContent = "Offline – saved for later sync.";
saveOffline(entry);
}
$("#submitBtn").disabled = false;
});

$("#saveOfflineBtn").addEventListener("click", () => {
const entry = getFormData();
saveOffline(entry);
$("#statusMsg").textContent = "Saved offline.";
});

$("#syncBtn").addEventListener("click", () => {
syncQueue();
});

window.addEventListener("load", () => {
if ("serviceWorker" in navigator) {
navigator.serviceWorker.register("service-worker.js");
}
// default timestamp = now (local)
const dt = document.getElementById("timestamp");
if (dt && !dt.value) dt.value = new Date().toISOString().slice(0,16);
updatePendingList();
});
